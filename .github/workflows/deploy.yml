name: Deploy to ECS
on:
  release:
    types: [ published ]

env:
  AWS_REGION: ap-southeast-2
  ECS_CLUSTER: stark-accutech-payslip-service-cluster
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: stark-accutech_payslip-service_container

jobs:
  build-image:
    name: Build and Push Docker image to Dockerhub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '8'
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build application
        run: ./mvnw clean install -DskipTests
      - name: Set env variable
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/*}" >> $GITHUB_ENV
      - name: Build Docker image
        run: docker build -f Dockerfile --build-arg VERSION=$RELEASE_VERSION -t tandeanrobbie/payslip-service:$RELEASE_VERSION .
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push image to registy
        run: docker push tandeanrobbie/payslip-service:$RELEASE_VERSION

  deploy:
    needs: build-image
    name: Deploy to ECS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set image name var
        id: image-name-var
        run: echo ::set-output name=docker_image::"docker.io/tandeanrobbie/payslip-service:$(echo ${GITHUB_REF#refs/tags/*})"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.image-name-var.outputs.docker_image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
